generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Member {
  id        String   @id @default(cuid())
  name      String
  email     String?
  linkedin  String?
  instagram String?
  image     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  org       Org?
  role      Role
}

model User {
  id           String         @id @default(cuid())
  email        String         @unique
  name         String
  college_name String         @default("Individual")
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  role         String         @default("participant")
  POCId        String?
  accomodation Boolean        @default(false)
  contact      String         @default("")
  ambassador   Ambassador?
  invites      InviteToken[]
  merchOrders  MerchOrder[]
  regEvents    Registration[]
  teamLeader   Team[]         @relation("teamLeader")
  POC          Ambassador?    @relation("POC", fields: [POCId], references: [id])
  teams        Team[]         @relation("TeamToUser")
}

model Merch {
  id        String       @id @default(cuid())
  name      String
  price     Int
  desc      String
  images    String[]
  stock     Int
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  orders    MerchOrder[]
}

model MerchOrder {
  id           String   @id @default(cuid())
  userId       String
  quantity     Int
  totalPrice   Int
  sizes         Size[]
  verified     Boolean  @default(false)
  paymentId    String   @unique
  paymentProof String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  merch        Merch[]
  user         User     @relation(fields: [userId], references: [id])
}

model Ambassador {
  id          String   @id @default(cuid())
  token       String   @unique
  userId      String   @unique
  tier        String   @default("basic")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
  contingents User[]   @relation("POC")
}

model Team {
  id            String        @id @default(cuid())
  name          String
  prize_money   Int           @default(0)
  ranking       Int?
  submissions   String
  leaderId      String
  competitionId String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  finalized     Boolean       @default(false)
  invitations   InviteToken[]
  competition   Competition   @relation(fields: [competitionId], references: [id])
  leader        User          @relation("teamLeader", fields: [leaderId], references: [id])
  team_members  User[]        @relation("TeamToUser")

  @@unique([name, competitionId])
}

model InviteToken {
  token     String   @id
  teamId    String
  userId    String
  createdAt DateTime @default(now())
  team      Team     @relation(fields: [teamId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([teamId, userId])
}

model Competition {
  id                   String       @id @default(cuid())
  prizepool            Int          @default(0)
  max_team_size        Int          @default(5)
  min_team_size        Int          @default(1)
  rulebook             String?
  problem_statement    String?
  competitionDetailsId String       @unique
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt
  competitionDetails   EventDetails @relation(fields: [competitionDetailsId], references: [id])
  teams                Team[]
}

model Sponsor {
  id      String @id @default(cuid())
  name    String
  title   String
  logo    String
  website String
  tier    SponsorTier @default(value: event)
}

model EventDetails {
  id            String              @id @default(cuid())
  begin_time    DateTime
  end_time      DateTime
  name          String
  slug          String              @default("")
  description   String
  venue         String
  cover         String
  tags          Tag[]
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  competition   Competition?
  expos         Expos?
  pronite       Pronite?
  registrations Registration[]
  regPlans      RegistrationLevel[]
  workshops     Workshops?

  @@index([description(ops: raw("gin_trgm_ops"))], map: "idx_eventdetails_description_trgm", type: Gin)
  @@index([name(ops: raw("gin_trgm_ops"))], map: "idx_eventdetails_name_trgm", type: Gin)
}

model Registration {
  id           String            @id @default(cuid())
  userId       String
  planId       String
  eventId      String
  paymentId    String?           @unique
  createdAt    DateTime          @default(now())
  paymentProof String
  verified     Boolean           @default(false)
  event        EventDetails      @relation(fields: [eventId], references: [id])
  plan         RegistrationLevel @relation(fields: [planId], references: [id])
  user         User              @relation(fields: [userId], references: [id])

  @@unique([userId, eventId])
}

model RegistrationLevel {
  id             String         @id @default(cuid())
  name           String         @default("")
  description    String         @default("")
  price          Int            @default(0)
  labelling      String         @default("basic")
  eventDetailsId String
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  Registrations  Registration[]
  eventDetails   EventDetails   @relation(fields: [eventDetailsId], references: [id])
}

model Expos {
  id             String       @id @default(cuid())
  exposDetailsId String       @unique
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  exposDetails   EventDetails @relation(fields: [exposDetailsId], references: [id])
}

model Workshops {
  id                String       @id @default(cuid())
  workshopDetailsId String       @unique
  college_special   Boolean      @default(false)
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  workshopDetails   EventDetails @relation(fields: [workshopDetailsId], references: [id])
}

model Pronite {
  id               String       @id @default(cuid())
  max_capacity     Int          @default(1000)
  ticket_price     Int          @default(0)
  proniteDetailsId String       @unique
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  proniteDetails   EventDetails @relation(fields: [proniteDetailsId], references: [id])
}

enum Size {
  S
  M
  L
  XL
  XXL
}

enum SponsorTier {
  title
  associate
  platinum
  gold
  silver
  bronze
  event
}

enum Org {
  WebDev
  Design
  Content
  Planning
  Photography
  Sponsorship
  Security
  Publicity
  Media
  Hospitality
  Decoration
}

enum Role {
  Convenor
  CoConvenor
  Head
  Mentor
}

enum Tag {
  ML
  AI
  WebDev
  AppDev
  GameDev
  Heuristics
  Robotics
  Piloting
  IoT
  IOT
  Blockchain
  DataStructures
  Algorithms
  Cybersecurity
  CTF
  ReverseEngineering
  Quiz
  Identification
  DataScience
  StructuralEngineering
  DisasterManagement
  Infrastructure
  Entrepreneurship
  Startups
  Astronomy
  ScienceCommunication
  CompetitiveProgramming
  Coding
  AR
  PuzzleSolving
  Automation
  PathPlanning
  SpaceTech
  Engineering
  Matlab
  BrainGames
  TeamSport
  Entertainment
  Photography
  StructuralStability
  FluidMechanics
  MechanicalDesign
  InterviewPrep
  Hackathon
  Simulation
  Healthcare
  BioEngineering
  Sensors
  Mechanics
  CAD
  EngineeringDesign
  Aerodynamics
  Counselling
  Startup
  OpenMic
  Games
  Electronics
  VR
  Projects
  Clubs
  SustainableDevelopment
  Racing
  Memento
  Drones
  StockInvestment
  Investment
  FinanceManagement
  Civil
  Astrax
  RocketLaunch
  Aerospace
  SpaceExploration
  Innovation
}
